{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst exercisesStore = create(set => ({\n  exercises: null,\n  updating: false,\n  emptyExercise: {\n    number: \"\",\n    name: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    workout: null,\n    log: null\n  },\n  updateForm: {\n    name: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    _id: null,\n    workout: null,\n    log: null\n  },\n  updateUpdateFormField: e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        updateForm: {\n          ...state.updateForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  fetchExercises: async _id => {\n    const res = await axios.get(`/workouts/${_id}/exercises`);\n    set({\n      exercises: res.data.exercises\n    });\n  },\n  createExercise: async (e, workoutId) => {\n    //create an empty exercise that will be updated\n    e.preventDefault();\n\n    //get log id\n    const workout = await axios.get(`/workouts/${workoutId}`);\n    set(state => {\n      return {\n        emptyExercise: {\n          ...state.emptyExercise,\n          workout: workoutId,\n          log: workout.data.log\n        }\n      };\n    });\n    const {\n      emptyExercise,\n      exercises\n    } = exercisesStore.getState();\n    const res = await axios.post(\"/exercises\", emptyExercise);\n    set({\n      exercises: [...exercises, res.data.myExercise]\n    });\n    set(state => {\n      return {\n        emptyExercise: {\n          ...state.emptyExercise,\n          workout: null,\n          log: null\n        }\n      };\n    });\n  },\n  deleteExercise: async _id => {\n    const {\n      exercises\n    } = exercisesStore.getState();\n    await axios.delete(`/exercises/${_id}`);\n    const newExercises = exercises.filter(exercise => {\n      return exercise._id !== _id;\n    });\n    set({\n      exercises: newExercises\n    });\n  },\n  toggleUpdate: exercise => {\n    set({\n      updateForm: {\n        name: exercise.name,\n        weight: exercise.weight,\n        sets: exercise.sets,\n        reps: exercise.reps,\n        intensity: exercise.intensity,\n        notes: exercise.notes,\n        _id: exercise._id,\n        workout: exercise.workout,\n        log: exercise.log\n      },\n      updating: true\n    });\n  },\n  /*\n   toggleCreate: (workout) => {\n      set({\n          create: true\n      });\n  },\n  */\n\n  updateExercise: async e => {\n    e.preventDefault();\n    const {\n      updateForm: {\n        name,\n        weight,\n        sets,\n        reps,\n        intensity,\n        notes,\n        _id,\n        workout,\n        log\n      },\n      exercises\n    } = exercisesStore.getState();\n    const res = await axios.put(`/exercises/${_id}`, {\n      name,\n      weight,\n      sets,\n      reps,\n      intensity,\n      notes,\n      workout,\n      log\n    });\n    const newExercises = [...exercises];\n    const exerciseIndex = exercises.findIndex(exercise => {\n      return exercise._id === _id;\n    });\n    newExercises[exerciseIndex] = res.data.myExercise;\n    set({\n      exercises: newExercises,\n      updateForm: {\n        name: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        _id: null,\n        log: null,\n        workout: null\n      },\n      updating: false\n    });\n  }\n}));\nexport default exercisesStore;","map":{"version":3,"names":["create","axios","exercisesStore","set","exercises","updating","emptyExercise","number","name","weight","sets","reps","intensity","notes","workout","log","updateForm","_id","updateUpdateFormField","e","value","target","state","fetchExercises","res","get","data","createExercise","workoutId","preventDefault","getState","post","myExercise","deleteExercise","delete","newExercises","filter","exercise","toggleUpdate","updateExercise","put","exerciseIndex","findIndex"],"sources":["/Users/aidankatz/Projects/logbook-simple/frontend/src/stores/exercisesStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst exercisesStore = create((set) => ({\n    exercises: null,\n\n    updating: false,\n\n    emptyExercise: {\n        number: \"\",\n        name: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        workout: null,\n        log: null\n    },\n\n    updateForm: {\n        name: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        _id: null,\n        workout: null,\n        log: null\n    },\n\n    updateUpdateFormField: (e) => {\n        const {name, value} = e.target;\n\n        set(state => {\n            return {\n                updateForm: {\n                    ...state.updateForm,\n                    [name]: value\n                }\n            }\n        });\n    },\n\n    fetchExercises: async (_id) => {\n        const res = await axios.get(`/workouts/${_id}/exercises`);\n        set({\n            exercises: res.data.exercises\n        });\n    },\n\n    createExercise: async (e, workoutId) => {\n        //create an empty exercise that will be updated\n        e.preventDefault();\n\n        //get log id\n        const workout = await axios.get(`/workouts/${workoutId}`);\n\n        set((state) => {\n            return {\n                emptyExercise: {\n                    ...state.emptyExercise,\n                    workout: workoutId,\n                    log: workout.data.log\n                }\n            };\n        });\n\n        const { emptyExercise, exercises } = exercisesStore.getState();\n\n        const res = await axios.post(\"/exercises\", emptyExercise);\n\n        set({\n            exercises: [...exercises, res.data.myExercise]\n        });\n        set((state) => {\n            return {\n                emptyExercise: {\n                    ...state.emptyExercise,\n                    workout: null,\n                    log: null\n                }\n            };\n        });\n    },\n\n    deleteExercise: async (_id) => {\n        const { exercises } = exercisesStore.getState();\n\n        await axios.delete(`/exercises/${_id}`);\n\n        const newExercises = exercises.filter((exercise) => {\n            return exercise._id !== _id;\n        });\n\n        set({\n            exercises: newExercises\n        });\n    },\n\n    toggleUpdate: (exercise) => {\n        set({\n            updateForm: {\n                name: exercise.name,\n                weight: exercise.weight,\n                sets: exercise.sets,\n                reps: exercise.reps,\n                intensity: exercise.intensity,\n                notes: exercise.notes,\n                _id: exercise._id,\n                workout: exercise.workout,\n                log: exercise.log\n            },\n            updating: true\n        });\n    },\n\n    /*\n\n    toggleCreate: (workout) => {\n        set({\n            create: true\n        });\n    },\n    */\n\n    updateExercise: async (e) => {\n        e.preventDefault();\n        const {updateForm: {name, weight, sets, reps, intensity, notes, _id, workout, log}, exercises} = exercisesStore.getState();\n        const res = await axios.put(`/exercises/${_id}`, {name, weight, sets, reps, intensity, notes, workout, log});\n\n        const newExercises = [...exercises];\n        const exerciseIndex = exercises.findIndex((exercise) => {\n            return exercise._id === _id;\n        });\n        newExercises[exerciseIndex] = res.data.myExercise;\n\n        set({\n            exercises: newExercises,\n            updateForm: {\n                name: \"\",\n                weight: \"\",\n                sets: \"\",\n                reps: \"\",\n                intensity: \"\",\n                notes: \"\",\n                _id: null,\n                log: null,\n                workout: null\n            },\n            updating: false\n        });\n    }\n  }));\n\nexport default exercisesStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}