{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst exercisesStore = create(set => ({\n  exercises: null,\n  updating: false,\n  emptyExercise: {\n    number: \"\",\n    exercise: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    workout: null,\n    log: null\n  },\n  updateForm: {\n    exercise: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    _id: null,\n    workout: null,\n    log: null\n  },\n  updateUpdateFormField: e => {\n    const {\n      name,\n      value\n    } = e.target;\n    console.log(value);\n    set(state => {\n      return {\n        updateForm: {\n          ...state.updateForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  fetchExercises: async _id => {\n    const res = await axios.get(`/workouts/${_id}/exercises`);\n    set({\n      exercises: res.data.exercises\n    });\n  },\n  createExercise: async (e, workoutId) => {\n    //create an empty exercise that will be updated\n    e.preventDefault();\n\n    //get log id\n    const workout = await axios.get(`/workouts/${workoutId}`);\n    set(state => {\n      return {\n        emptyExercise: {\n          ...state.emptyExercise,\n          workout: workoutId,\n          log: workout.data.log\n        }\n      };\n    });\n    const {\n      emptyExercise,\n      exercises\n    } = exercisesStore.getState();\n    const res = await axios.post(\"/exercises\", emptyExercise);\n    set({\n      exercises: [...exercises, res.data.myExercise]\n    });\n    set(state => {\n      return {\n        emptyExercise: {\n          ...state.emptyExercise,\n          workout: null,\n          log: null\n        }\n      };\n    });\n  },\n  deleteExercise: async _id => {\n    const {\n      exercises\n    } = exercisesStore.getState();\n    await axios.delete(`/exercises/${_id}`);\n    const newExercises = exercises.filter(exercise => {\n      return exercise._id !== _id;\n    });\n    set({\n      exercises: newExercises\n    });\n  },\n  toggleUpdate: exercise => {\n    console.log(exercise.exercise);\n    set({\n      updateForm: {\n        exercise: exercise.exercise,\n        weight: exercise.weight,\n        sets: exercise.sets,\n        reps: exercise.reps,\n        intensity: exercise.intensity,\n        notes: exercise.notes,\n        _id: exercise._id,\n        workout: exercise.workout,\n        log: exercise.log\n      },\n      updating: true\n    });\n  },\n  /*\n   toggleCreate: (workout) => {\n      set({\n          create: true\n      });\n  },\n  */\n\n  updateExercise: async e => {\n    e.preventDefault();\n    const {\n      updateForm: {\n        exercise,\n        weight,\n        sets,\n        reps,\n        intensity,\n        notes,\n        _id,\n        workout,\n        log\n      },\n      exercises\n    } = exercisesStore.getState();\n    console.log(exercise);\n    const res = await axios.put(`/exercises/${_id}`, {\n      exercise,\n      weight,\n      sets,\n      reps,\n      intensity,\n      notes,\n      workout,\n      log\n    });\n    const newExercises = [...exercises];\n    const exerciseIndex = exercises.findIndex(exercise => {\n      return exercise._id === _id;\n    });\n    newExercises[exerciseIndex] = res.data.myExercise;\n    console.log(res.data.myExercise);\n    set({\n      exercises: newExercises,\n      updateForm: {\n        exercise: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        _id: null,\n        log: null,\n        workout: null\n      },\n      updating: false\n    });\n  }\n}));\nexport default exercisesStore;","map":{"version":3,"names":["create","axios","exercisesStore","set","exercises","updating","emptyExercise","number","exercise","weight","sets","reps","intensity","notes","workout","log","updateForm","_id","updateUpdateFormField","e","name","value","target","console","state","fetchExercises","res","get","data","createExercise","workoutId","preventDefault","getState","post","myExercise","deleteExercise","delete","newExercises","filter","toggleUpdate","updateExercise","put","exerciseIndex","findIndex"],"sources":["/Users/aidankatz/Projects/logbook-simple/frontend/src/stores/exercisesStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst exercisesStore = create((set) => ({\n    exercises: null,\n\n    updating: false,\n\n    emptyExercise: {\n        number: \"\",\n        exercise: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        workout: null,\n        log: null\n    },\n\n    updateForm: {\n        exercise: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        _id: null,\n        workout: null,\n        log: null\n    },\n\n    updateUpdateFormField: (e) => {\n        const {name, value} = e.target;\n        console.log(value);\n\n        set(state => {\n            return {\n                updateForm: {\n                    ...state.updateForm,\n                    [name]: value\n                }\n            }\n        });\n    },\n\n    fetchExercises: async (_id) => {\n        const res = await axios.get(`/workouts/${_id}/exercises`);\n        set({\n            exercises: res.data.exercises\n        });\n    },\n\n    createExercise: async (e, workoutId) => {\n        //create an empty exercise that will be updated\n        e.preventDefault();\n\n        //get log id\n        const workout = await axios.get(`/workouts/${workoutId}`);\n\n        set((state) => {\n            return {\n                emptyExercise: {\n                    ...state.emptyExercise,\n                    workout: workoutId,\n                    log: workout.data.log\n                }\n            };\n        });\n\n        const { emptyExercise, exercises } = exercisesStore.getState();\n\n        const res = await axios.post(\"/exercises\", emptyExercise);\n\n        set({\n            exercises: [...exercises, res.data.myExercise]\n        });\n        set((state) => {\n            return {\n                emptyExercise: {\n                    ...state.emptyExercise,\n                    workout: null,\n                    log: null\n                }\n            };\n        });\n    },\n\n    deleteExercise: async (_id) => {\n        const { exercises } = exercisesStore.getState();\n\n        await axios.delete(`/exercises/${_id}`);\n\n        const newExercises = exercises.filter((exercise) => {\n            return exercise._id !== _id;\n        });\n\n        set({\n            exercises: newExercises\n        });\n    },\n\n    toggleUpdate: (exercise) => {\n\n        console.log(exercise.exercise);\n        set({\n            updateForm: {\n                exercise: exercise.exercise,\n                weight: exercise.weight,\n                sets: exercise.sets,\n                reps: exercise.reps,\n                intensity: exercise.intensity,\n                notes: exercise.notes,\n                _id: exercise._id,\n                workout: exercise.workout,\n                log: exercise.log\n            },\n            updating: true\n        });\n    },\n\n    /*\n\n    toggleCreate: (workout) => {\n        set({\n            create: true\n        });\n    },\n    */\n\n    updateExercise: async (e) => {\n        e.preventDefault();\n        const {updateForm: {exercise, weight, sets, reps, intensity, notes, _id, workout, log}, exercises} = exercisesStore.getState();\n        console.log(exercise);\n        const res = await axios.put(`/exercises/${_id}`, {exercise, weight, sets, reps, intensity, notes, workout, log});\n\n        const newExercises = [...exercises];\n        const exerciseIndex = exercises.findIndex((exercise) => {\n            return exercise._id === _id;\n        });\n        newExercises[exerciseIndex] = res.data.myExercise;\n        console.log(res.data.myExercise);\n\n        set({\n            exercises: newExercises,\n            updateForm: {\n                exercise: \"\",\n                weight: \"\",\n                sets: \"\",\n                reps: \"\",\n                intensity: \"\",\n                notes: \"\",\n                _id: null,\n                log: null,\n                workout: null\n            },\n            updating: false\n        });\n    }\n  }));\n\nexport default exercisesStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}