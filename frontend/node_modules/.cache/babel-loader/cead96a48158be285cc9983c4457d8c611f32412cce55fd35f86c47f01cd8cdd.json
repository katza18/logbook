{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst exercisesStore = create(set => ({\n  exercises: null,\n  create: false,\n  emptyExercise: {\n    number: \"\",\n    exercise: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    workout: null,\n    log: null\n  },\n  setCreateFalse: () => {\n    set({\n      create: false\n    });\n  },\n  updateUpdateFormField: e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        updateForm: {\n          ...state.updateForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  fetchExercises: async _id => {\n    const res = await axios.get(`/workouts/${_id}/exercises`);\n    set({\n      exercises: res.data.exercises\n    });\n  },\n  createExercise: async (e, workoutId) => {\n    //create an empty exercise that will be updated\n    e.preventDefault();\n    set(state => {\n      return {\n        emptyExercise: {\n          ...state.emptyExercise,\n          workout: workoutId,\n          log: logId\n        }\n      };\n    });\n    const {\n      emptyExercise,\n      exercises\n    } = exercisesStore.getState();\n    const res = await axios.post(\"/exercises\", emptyExercise);\n    set({\n      exercises: [...exercises, res.data.myExercise]\n    });\n    set(state => {\n      return {\n        emptyExercise: {\n          ...state.emptyExercise,\n          workout: null,\n          log: null\n        }\n      };\n    });\n  },\n  deleteExercise: async _id => {\n    const {\n      exercises\n    } = exercisesStore.getState();\n    await axios.delete(`/exercises/${_id}`);\n    const newExercises = exercises.filter(exercise => {\n      return exercise._id !== _id;\n    });\n    set({\n      exercises: newExercises\n    });\n  }\n\n  /*\n   toggleUpdate: (exercise) => {\n      set({\n          updateForm: {\n              name: exercise.name,\n              body: exercise.body,\n              _id: exercise._id\n          }\n      });\n  },\n   toggleCreate: (workout) => {\n      set({\n          create: true\n      });\n  },\n   updateWorkout: async (e) => {\n      e.preventDefault();\n      const {updateForm: {title, body, date, _id}, workouts} = workoutsStore.getState();\n      const res = await axios.put(`/workouts/${_id}`, {title, body, date});\n       const newWorkouts = [...workouts];\n      const workoutIndex = workouts.findIndex((workout) => {\n          return workout._id === _id;\n      });\n      newWorkouts[workoutIndex] = res.data.workout;\n       set({\n          workouts: newWorkouts,\n          updateForm: {\n              title: \"\", body: \"\", _id: null, date: null\n          }\n      });\n  }\n  */\n}));\n\nexport default exercisesStore;","map":{"version":3,"names":["create","axios","exercisesStore","set","exercises","emptyExercise","number","exercise","weight","sets","reps","intensity","notes","workout","log","setCreateFalse","updateUpdateFormField","e","name","value","target","state","updateForm","fetchExercises","_id","res","get","data","createExercise","workoutId","preventDefault","logId","getState","post","myExercise","deleteExercise","delete","newExercises","filter"],"sources":["/Users/aidankatz/Projects/logbook-simple/frontend/src/stores/exercisesStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst exercisesStore = create((set) => ({\n    exercises: null,\n    create: false,\n\n    emptyExercise: {\n        number: \"\",\n        exercise: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        workout: null,\n        log: null\n    },\n\n    setCreateFalse: () => {\n        set({\n            create: false\n        });\n    },\n\n    updateUpdateFormField: (e) => {\n        const {name, value} = e.target;\n\n        set(state => {\n            return {\n                updateForm: {\n                    ...state.updateForm,\n                    [name]: value\n                }\n            }\n        });\n    },\n\n    fetchExercises: async (_id) => {\n        const res = await axios.get(`/workouts/${_id}/exercises`);\n        set({\n            exercises: res.data.exercises\n        });\n    },\n\n    createExercise: async (e, workoutId) => {\n        //create an empty exercise that will be updated\n        e.preventDefault();\n        set((state) => {\n            return {\n                emptyExercise: {\n                    ...state.emptyExercise,\n                    workout: workoutId,\n                    log: logId\n                }\n            };\n        });\n\n        const { emptyExercise, exercises } = exercisesStore.getState();\n\n        const res = await axios.post(\"/exercises\", emptyExercise);\n\n        set({\n            exercises: [...exercises, res.data.myExercise]\n        });\n        set((state) => {\n            return {\n                emptyExercise: {\n                    ...state.emptyExercise,\n                    workout: null,\n                    log: null\n                }\n            };\n        });\n    },\n\n\n    deleteExercise: async (_id) => {\n        const { exercises } = exercisesStore.getState();\n\n        await axios.delete(`/exercises/${_id}`);\n\n        const newExercises = exercises.filter((exercise) => {\n            return exercise._id !== _id;\n        });\n\n        set({\n            exercises: newExercises\n        });\n    },\n\n    /*\n\n    toggleUpdate: (exercise) => {\n        set({\n            updateForm: {\n                name: exercise.name,\n                body: exercise.body,\n                _id: exercise._id\n            }\n        });\n    },\n\n    toggleCreate: (workout) => {\n        set({\n            create: true\n        });\n    },\n\n    updateWorkout: async (e) => {\n        e.preventDefault();\n        const {updateForm: {title, body, date, _id}, workouts} = workoutsStore.getState();\n        const res = await axios.put(`/workouts/${_id}`, {title, body, date});\n\n        const newWorkouts = [...workouts];\n        const workoutIndex = workouts.findIndex((workout) => {\n            return workout._id === _id;\n        });\n        newWorkouts[workoutIndex] = res.data.workout;\n\n        set({\n            workouts: newWorkouts,\n            updateForm: {\n                title: \"\", body: \"\", _id: null, date: null\n            }\n        });\n    }\n    */\n  }));\n\nexport default exercisesStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}