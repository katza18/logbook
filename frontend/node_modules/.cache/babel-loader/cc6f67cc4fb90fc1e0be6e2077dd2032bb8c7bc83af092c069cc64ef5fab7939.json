{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst exercisesStore = create(set => ({\n  exercises: null,\n  create: false,\n  emptyExercise: {\n    number: \"\",\n    exercise: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    workout: null\n  },\n  //may not need\n  createForm: {\n    number: \"\",\n    exercise: \"\",\n    weight: \"\",\n    sets: \"\",\n    reps: \"\",\n    intensity: \"\",\n    notes: \"\",\n    _id: null\n  },\n  /*\n  updateForm: {\n      title: \"\",\n      body: \"\",\n      date: null,\n      _id: null\n  },\n  */\n\n  setCreateFalse: () => {\n    set({\n      create: false\n    });\n  },\n  /*\n  updateCreateFormField: (e) => {\n      const {name, value} = e.target;\n      set((state) => {\n          return {\n              createForm: {\n                  ...state.createForm,\n                  [name]: value\n              }\n          };\n      });\n  },\n  */\n\n  updateUpdateFormField: e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        updateForm: {\n          ...state.updateForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  fetchExercises: async _id => {\n    const res = await axios.get(`/workouts/${_id}/exercises`);\n    set({\n      exercises: res.data.exercises\n    });\n  },\n  createExercise: async _id => {\n    //create an empty exercise that will be updated\n    const {\n      emptyExercise,\n      exercises\n    } = exercisesStore.getState();\n    //e.preventDefault();\n    set({\n      emptyExercise: {\n        workout: _id\n      }\n    });\n    const res = await axios.post(\"/exercises\", emptyExercise);\n    set({\n      exercises: [...exercises, res.data.exercise],\n      emptyExercise: {\n        workout: \"\"\n      }\n    });\n  }\n\n  /*\n  deleteExercise: async (_id) => {\n      const { exercises } = exercisesStore.getState();\n       await axios.delete(`/exercises/${_id}`);\n       const newExercises = exercises.filter((exercise) => {\n          return exercise._id !== _id;\n      });\n       set({\n          workouts: newWorkouts\n      });\n  },\n   toggleUpdate: (exercise) => {\n      set({\n          updateForm: {\n              name: exercise.name,\n              body: exercise.body,\n              _id: exercise._id\n          }\n      });\n  },\n   toggleCreate: (workout) => {\n      set({\n          create: true\n      });\n  },\n   updateWorkout: async (e) => {\n      e.preventDefault();\n      const {updateForm: {title, body, date, _id}, workouts} = workoutsStore.getState();\n      const res = await axios.put(`/workouts/${_id}`, {title, body, date});\n       const newWorkouts = [...workouts];\n      const workoutIndex = workouts.findIndex((workout) => {\n          return workout._id === _id;\n      });\n      newWorkouts[workoutIndex] = res.data.workout;\n       set({\n          workouts: newWorkouts,\n          updateForm: {\n              title: \"\", body: \"\", _id: null, date: null\n          }\n      });\n  }\n  */\n}));\n\nexport default exercisesStore;","map":{"version":3,"names":["create","axios","exercisesStore","set","exercises","emptyExercise","number","exercise","weight","sets","reps","intensity","notes","workout","createForm","_id","setCreateFalse","updateUpdateFormField","e","name","value","target","state","updateForm","fetchExercises","res","get","data","createExercise","getState","post"],"sources":["/Users/aidankatz/Projects/logbook-simple/frontend/src/stores/exercisesStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst exercisesStore = create((set) => ({\n    exercises: null,\n    create: false,\n\n    emptyExercise: {\n        number: \"\",\n        exercise: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        workout: null\n    },\n\n    //may not need\n    createForm: {\n        number: \"\",\n        exercise: \"\",\n        weight: \"\",\n        sets: \"\",\n        reps: \"\",\n        intensity: \"\",\n        notes: \"\",\n        _id: null\n    },\n\n    /*\n    updateForm: {\n        title: \"\",\n        body: \"\",\n        date: null,\n        _id: null\n    },\n    */\n\n    setCreateFalse: () => {\n        set({\n            create: false\n        });\n    },\n\n    /*\n    updateCreateFormField: (e) => {\n        const {name, value} = e.target;\n        set((state) => {\n            return {\n                createForm: {\n                    ...state.createForm,\n                    [name]: value\n                }\n            };\n        });\n    },\n    */\n\n    updateUpdateFormField: (e) => {\n        const {name, value} = e.target;\n\n        set(state => {\n            return {\n                updateForm: {\n                    ...state.updateForm,\n                    [name]: value\n                }\n            }\n        });\n    },\n\n    fetchExercises: async (_id) => {\n        const res = await axios.get(`/workouts/${_id}/exercises`);\n        set({\n            exercises: res.data.exercises\n        });\n    },\n\n    createExercise: async (_id) => {\n        //create an empty exercise that will be updated\n        const { emptyExercise, exercises } = exercisesStore.getState();\n        //e.preventDefault();\n        set({\n            emptyExercise: {\n                workout: _id\n            }\n        });\n\n        const res = await axios.post(\"/exercises\", emptyExercise);\n\n        set({\n            exercises: [...exercises, res.data.exercise],\n            emptyExercise: {\n                workout: \"\"\n            }\n        });\n    },\n\n    /*\n    deleteExercise: async (_id) => {\n        const { exercises } = exercisesStore.getState();\n\n        await axios.delete(`/exercises/${_id}`);\n\n        const newExercises = exercises.filter((exercise) => {\n            return exercise._id !== _id;\n        });\n\n        set({\n            workouts: newWorkouts\n        });\n    },\n\n    toggleUpdate: (exercise) => {\n        set({\n            updateForm: {\n                name: exercise.name,\n                body: exercise.body,\n                _id: exercise._id\n            }\n        });\n    },\n\n    toggleCreate: (workout) => {\n        set({\n            create: true\n        });\n    },\n\n    updateWorkout: async (e) => {\n        e.preventDefault();\n        const {updateForm: {title, body, date, _id}, workouts} = workoutsStore.getState();\n        const res = await axios.put(`/workouts/${_id}`, {title, body, date});\n\n        const newWorkouts = [...workouts];\n        const workoutIndex = workouts.findIndex((workout) => {\n            return workout._id === _id;\n        });\n        newWorkouts[workoutIndex] = res.data.workout;\n\n        set({\n            workouts: newWorkouts,\n            updateForm: {\n                title: \"\", body: \"\", _id: null, date: null\n            }\n        });\n    }\n    */\n  }));\n\nexport default exercisesStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,GAAGF,MAAM,CAAEG,GAAG,KAAM;EACpCC,SAAS,EAAE,IAAI;EACfJ,MAAM,EAAE,KAAK;EAEbK,aAAa,EAAE;IACXC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE;EACb,CAAC;EAED;EACAC,UAAU,EAAE;IACRR,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTG,GAAG,EAAE;EACT,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIC,cAAc,EAAEA,CAAA,KAAM;IAClBb,GAAG,CAAC;MACAH,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIiB,qBAAqB,EAAGC,CAAC,IAAK;IAC1B,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,CAAC,CAACG,MAAM;IAE9BlB,GAAG,CAACmB,KAAK,IAAI;MACT,OAAO;QACHC,UAAU,EAAE;UACR,GAAGD,KAAK,CAACC,UAAU;UACnB,CAACJ,IAAI,GAAGC;QACZ;MACJ,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAEDI,cAAc,EAAE,MAAOT,GAAG,IAAK;IAC3B,MAAMU,GAAG,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAE,aAAYX,GAAI,YAAW,CAAC;IACzDZ,GAAG,CAAC;MACAC,SAAS,EAAEqB,GAAG,CAACE,IAAI,CAACvB;IACxB,CAAC,CAAC;EACN,CAAC;EAEDwB,cAAc,EAAE,MAAOb,GAAG,IAAK;IAC3B;IACA,MAAM;MAAEV,aAAa;MAAED;IAAU,CAAC,GAAGF,cAAc,CAAC2B,QAAQ,EAAE;IAC9D;IACA1B,GAAG,CAAC;MACAE,aAAa,EAAE;QACXQ,OAAO,EAAEE;MACb;IACJ,CAAC,CAAC;IAEF,MAAMU,GAAG,GAAG,MAAMxB,KAAK,CAAC6B,IAAI,CAAC,YAAY,EAAEzB,aAAa,CAAC;IAEzDF,GAAG,CAAC;MACAC,SAAS,EAAE,CAAC,GAAGA,SAAS,EAAEqB,GAAG,CAACE,IAAI,CAACpB,QAAQ,CAAC;MAC5CF,aAAa,EAAE;QACXQ,OAAO,EAAE;MACb;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASE,CAAC,CAAC,CAAC;;AAEL,eAAeX,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}