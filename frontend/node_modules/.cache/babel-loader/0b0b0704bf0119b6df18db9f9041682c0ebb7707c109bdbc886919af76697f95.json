{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst foodsStore = create(set => ({\n  foods: null,\n  emptyFood: {\n    name: \"\",\n    protein: \"\",\n    carbs: \"\",\n    fat: \"\",\n    calories: \"\",\n    notes: \"\",\n    meal: null,\n    log: null\n  },\n  updateForm: {\n    name: \"\",\n    protein: \"\",\n    carbs: \"\",\n    fat: \"\",\n    calories: \"\",\n    notes: \"\",\n    meal: null,\n    log: null,\n    _id: null\n  },\n  updateUpdateFormField: e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        updateForm: {\n          ...state.updateForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  fetchFoods: async _id => {\n    const res = await axios.get(`/meals/${_id}/foods`);\n    set({\n      foods: res.data.foods\n    });\n  },\n  createFood: async (e, mealId) => {\n    //create an empty food that will be updated\n    e.preventDefault();\n\n    //get log id\n    const meal = await axios.get(`/meals/${mealId}`);\n    set(state => {\n      return {\n        emptyFood: {\n          ...state.emptyFood,\n          meal: mealId,\n          log: meal.data.log\n        }\n      };\n    });\n    const {\n      emptyFood,\n      foods\n    } = foodsStore.getState();\n    const res = await axios.post(\"/foods\", emptyFood);\n    set({\n      foods: [...foods, res.data.myFood]\n    });\n    set(state => {\n      return {\n        emptyFood: {\n          ...state.emptyFood,\n          meal: null,\n          log: null\n        }\n      };\n    });\n  },\n  deleteFood: async _id => {\n    const {\n      foods\n    } = foodsStore.getState();\n    await axios.delete(`/foods/${_id}`);\n    const newFoods = foods.filter(food => {\n      return food._id !== _id;\n    });\n    set({\n      foods: newFoods\n    });\n  },\n  toggleUpdate: food => {\n    set({\n      updateForm: {\n        name: food.name,\n        protein: food.protein,\n        carbs: food.carbs,\n        fat: food.fat,\n        calories: food.calories,\n        notes: food.notes,\n        _id: food._id,\n        meal: food.meal,\n        log: food.log\n      }\n    });\n  },\n  updateFood: async e => {\n    e.preventDefault();\n    const {\n      updateForm: {\n        name,\n        protein,\n        carbs,\n        fat,\n        calories,\n        notes,\n        _id,\n        meal,\n        log\n      },\n      foods\n    } = foodsStore.getState();\n    const res = await axios.put(`/foods/${_id}`, {\n      name,\n      protein,\n      carbs,\n      fat,\n      calories,\n      notes,\n      meal,\n      log\n    });\n    const newFoods = [...foods];\n    const foodIndex = foods.findIndex(food => {\n      return food._id === _id;\n    });\n    newFoods[foodIndex] = res.data.myFood;\n    set({\n      foods: newFoods,\n      updateForm: {\n        name: \"\",\n        protein: \"\",\n        carbs: \"\",\n        fat: \"\",\n        calories: \"\",\n        notes: \"\",\n        _id: null,\n        log: null,\n        meal: null\n      }\n    });\n  }\n}));\nexport default foodsStore;","map":{"version":3,"names":["create","axios","foodsStore","set","foods","emptyFood","name","protein","carbs","fat","calories","notes","meal","log","updateForm","_id","updateUpdateFormField","e","value","target","state","fetchFoods","res","get","data","createFood","mealId","preventDefault","getState","post","myFood","deleteFood","delete","newFoods","filter","food","toggleUpdate","updateFood","put","foodIndex","findIndex"],"sources":["/Users/aidankatz/Projects/logbook-simple/frontend/src/stores/foodsStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\n\nconst foodsStore = create((set) => ({\n    foods: null,\n\n    emptyFood: {\n        name: \"\",\n        protein: \"\",\n        carbs: \"\",\n        fat: \"\",\n        calories: \"\",\n        notes: \"\",\n        meal: null,\n        log: null\n    },\n\n    updateForm: {\n        name: \"\",\n        protein: \"\",\n        carbs: \"\",\n        fat: \"\",\n        calories: \"\",\n        notes: \"\",\n        meal: null,\n        log: null,\n        _id: null\n    },\n\n    updateUpdateFormField: (e) => {\n        const {name, value} = e.target;\n\n        set(state => {\n            return {\n                updateForm: {\n                    ...state.updateForm,\n                    [name]: value\n                }\n            }\n        });\n    },\n\n    fetchFoods: async (_id) => {\n        const res = await axios.get(`/meals/${_id}/foods`);\n        set({\n            foods: res.data.foods\n        });\n    },\n\n    createFood: async (e, mealId) => {\n        //create an empty food that will be updated\n        e.preventDefault();\n\n        //get log id\n        const meal = await axios.get(`/meals/${mealId}`);\n\n        set((state) => {\n            return {\n                emptyFood: {\n                    ...state.emptyFood,\n                    meal: mealId,\n                    log: meal.data.log\n                }\n            };\n        });\n\n        const { emptyFood, foods } = foodsStore.getState();\n\n        const res = await axios.post(\"/foods\", emptyFood);\n\n        set({\n            foods: [...foods, res.data.myFood]\n        });\n        set((state) => {\n            return {\n                emptyFood: {\n                    ...state.emptyFood,\n                    meal: null,\n                    log: null\n                }\n            };\n        });\n    },\n\n    deleteFood: async (_id) => {\n        const { foods } = foodsStore.getState();\n\n        await axios.delete(`/foods/${_id}`);\n\n        const newFoods = foods.filter((food) => {\n            return food._id !== _id;\n        });\n\n        set({\n            foods: newFoods\n        });\n    },\n\n    toggleUpdate: (food) => {\n        set({\n            updateForm: {\n                name: food.name,\n                protein: food.protein,\n                carbs: food.carbs,\n                fat: food.fat,\n                calories: food.calories,\n                notes: food.notes,\n                _id: food._id,\n                meal: food.meal,\n                log: food.log\n            }\n        });\n    },\n\n    updateFood: async (e) => {\n        e.preventDefault();\n        const {updateForm: {name, protein, carbs, fat, calories, notes, _id, meal, log}, foods} = foodsStore.getState();\n        const res = await axios.put(`/foods/${_id}`, {name, protein, carbs, fat, calories, notes, meal, log});\n\n        const newFoods = [...foods];\n        const foodIndex = foods.findIndex((food) => {\n            return food._id === _id;\n        });\n        newFoods[foodIndex] = res.data.myFood;\n\n        set({\n            foods: newFoods,\n            updateForm: {\n                name: \"\",\n                protein: \"\",\n                carbs: \"\",\n                fat: \"\",\n                calories: \"\",\n                notes: \"\",\n                _id: null,\n                log: null,\n                meal: null\n            }\n        });\n    }\n  }));\n\nexport default foodsStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}